#=========================================================================
# Core Directives
#=========================================================================

#-------------------------------------------------------------------------
# Available in all Contexts (main, http, mail, stream, server, location)
#=========================================================================

# error_log <file> [<level>]; = logs/error.log error
#-------------------------------------------------------------------------
# Configures logging to a file, remote syslog server, or memory buffer.
# Levels: debug, info, notice, warn, error, crit, alert, emerg
# NOTE: debug requires nginx --with-debug
#
# error_log /var/log/nginx/error.log error;

# include <file> | <mask>; = ---
#-------------------------------------------------------------------------
# Includes another file (or "mask", which is a wildcard pattern)
#
# include mime.types;
# include conf.d/*.conf;

#-------------------------------------------------------------------------
# Available only in the main context
#=========================================================================

# daemon on | off; = on
#-------------------------------------------------------------------------
# Whether to daemonize the nginx master process (primarily for debugging)
#
# daemon on;

# debug_points abort | stop; = ---
#-------------------------------------------------------------------------
# Whether to coredump (abort) or freeze (stop) on an internal error
#
# debug_points abort;

# env <variable>[=<value>]; = TZ (TZ is always inherited.)
#-------------------------------------------------------------------------
# Selectively inherit from the parent process or set environment variables
#
# env LC_ALL;

# load_module <file>; = ---
#-------------------------------------------------------------------------
# Loads a dynamic module (usually a shared object [so] file)
#
# load_module modules/ngx_mail_module.so;

# lock_file <file>; = logs/nginx.lock
#-------------------------------------------------------------------------
# The location of the lock used if 'accept_mutex' is 'on'.
#
# lock_file /var/lock/nginx-accept-mutex.lock

# master_process on | off; = on
#-------------------------------------------------------------------------
# When 'off', worker processes are not started. Used by nginx developers.
#
# master_process on;

# pcre_jit on | off; = off
#-------------------------------------------------------------------------
# Toggles compilation of PCRE regular expressions during config parsing.
# Needs PCRE with --enable-jit.
#
# pcre_jit on;

# pid <file>; = logs/nginx.pid
#-------------------------------------------------------------------------
# The location of the process ID of the ngins master process.
#
# pid /var/run/nginx.pid;

# ssl_engine <device>; = ---
#-------------------------------------------------------------------------
# Enables <device> for SSL hardware acceleration.
# NOTE this is apparently a choice from `openssl engine -t`, not a device.
#
# ssl_engine rdrand; # Where 'rdrand' is available in `openssl engine -t`

# thread_pool <name> threads=<number> [max_queue=<number>];
# = default threads=32 max_queue=65536
#-------------------------------------------------------------------------
# Defines a named thread pool for reading and sending files. If the queue
# is full, a read/send will complete with an error.
#
# thread_pool default threads=32 max_queue=65536;

# timer_resolution <interval>; = ---
#-------------------------------------------------------------------------
# Sets timer resolution, usually to make fewer gettimeofday() syscalls.
# NOTE: this is essentially a debounce.
#
# timer_resolution 100ms;

# user <user> [<group>]; = nobody nobody
#-------------------------------------------------------------------------
# Sets the user and group for worker processes. Omitting <group> sets it
# to the same value as <user>. (eg: `user x;` == `user x x;`)
#
# user nginx;

# worker_cpu_affinity <cpumask> | auto [<cpumask>]; = ---
#-------------------------------------------------------------------------
# Either:
# (1) Binds worker processes to specific CPUs identified by bitmask
# (2) auto: Binds processes to CPUs masked by <cpumask>
# NOTE: this directive is only available on FreeBSD and Linux.
#
# worker_cpu_affinity 0001 0010 0100 1000;
# worker_cpu_affinity auto 0011; # disable 2 CPUs

# worker_priority <number>; = 0
#-------------------------------------------------------------------------
# Assigns OS scheduling priority for worker processes.
# NOTE: priority usually ranges from 20 to -20, lowest-to-highest.
#
# worker_priority -20; # (probable) maximum priority

# worker_processes <number> | auto; = 1
#-------------------------------------------------------------------------
# Sets the number of worker processes. Setting "auto" attempts to
# automatically detect and use all available CPU cores.
#
# worker_processes auto;

# worker_rlimit_core <size>; = ---
#-------------------------------------------------------------------------
# Limits the size of a core file for worker processes. Change this to
# increase the limit without restarting nginx.
#
# worker_rlimit_core 100M;

# worker_rlimit_nofile <number>; = ---
#-------------------------------------------------------------------------
# Limits the maximum number of open files for worker processes. Change
# this to increase the limit without restarting nginx.
#
# worker_rlimit_nofile 1024;

# worker_shutdown_timeout <time>; = ---
#-------------------------------------------------------------------------
# Sets the timeout for a graceful shutdown of a worker process before
# nginx starts closing open connections.
#
# worker_shutdown_timeout 2s;

# working_directory <directory>; = ---
#-------------------------------------------------------------------------
# Sets the working directory for a worker process. Primarily used when
# writing a corefile, so that the worker has write permissions for the
# specified directory.
#
# working_directory /var/log/nginx/corefiles;

events {
  # accept_mutex on | off; = off
  #-----------------------------------------------------------------------
  # Force worker processes to take turns accepting connections
  #
  # accept_mutex off;

  # accept_mutex_delay <time>; = 500ms
  #-----------------------------------------------------------------------
  # How long workers wait to retry the lock if accept_mutex is on
  #
  # accept_mutex_delay 500ms;

  # debug_connection <address> | <CIDR> | unix:; = ---
  #-----------------------------------------------------------------------
  # Enables debug logging for a(n) IP, hostname, CIDR block, or sockets.
  # Needs nginx with --with-debug.
  #
  # debug_connection 127.0.0.1;
  # debug_connection localhost;
  # debug_connection 192.0.2.0/24;
  # debug_connection unix:;

  # multi_accept on | off; = off
  #-----------------------------------------------------------------------
  # If disabled, a worker process will accept one connection at a time.
  #
  # multi_accept off;

  # use <method>; = (most efficient system polling method)
  #-----------------------------------------------------------------------
  # Selects the connection processing method to use for polling/queuing.
  # Nginx automatically selects an efficient polling method for the OS
  # when nothing is manually specified.
  # NOTE: only specify a polling method if you know what you're doing.
  #
  # use select;
  # use epoll;  # Linux
  # use kqueue; # macOS

  # worker_aio_requests <number>; = 32
  #-----------------------------------------------------------------------
  # When using aio with epoll: sets the maximum number of aio operations
  # for a single worker.
  #
  # worker_aio_requests 255;

  # worker_connections <number>; = 512
  #-----------------------------------------------------------------------
  # Sets the maximum simultaneous connections a worker can open.
  # NOTE: this is also limited by worker_rlimit_nofile.
  #
  # worker_connections 1024;
}
